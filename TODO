For 0.6.0:
o) Support for using service names instead of ports.
   Make ports enums that can be either integers or service names?  Or just use
   strings and check the sanity in Socket::socket_address::operator() ?
o) Make interface/listener objects automatically start listening.
o) IPv6.
o) Clean up address configuration objects to be more sensible, being either
   specific components of addresses (e.g. to specify an IP address) or socket
   addresses (e.g. AF_UNIX paths, IP+port pairs for TCP or UDP or SCTP.)
o) Connector abstraction: connection pooling / connecting via a SOCKS server.

For 0.7.0:
o) New splice/ProxyPipe API and a producer/consumer data flow model.
o) Do some information exchange out-of-band when setting up connections between
   WANProxy instances so we know what Channel to send requests for declarations
   on.

For 0.8.0:
o) Cache hierarchy, including persistent storage.
o) TLS.

After 1.0.0:
o) A CLI program for management.  Remember to USE_POLL=select since Mac OS X can
   only use select(2) for stdin and stdout.
o) Make it possible to detect when we are sending to a socket that is also
   within WANProxy and avoid a system call -- just copy directly to the
   appropriate buffer.  It should be pretty easy to do this with the IO queueing
   system if we getpeername/getsockname to identify this occurring.
o) Add an IO queueing system that will make it possible to use lio_listio on
   systems that support it.
o) Make the XCodec encoder and decoder asynchronous.
o) Connection table. Database.
o) HTTP termination and reinitiation good enough to support an HTTP proxy mode.

Ongoing:
o) Add lots of comments.
o) Fix bugs.

Maybe:
o) Send definitions out-of-band, too, so that QoS and backpressure on one connection
   can't delay other connections.
o) The ProxyPipe code uses an asynchronous callback to notify the ProxyClient
   of an error, but this could result delayed cancellation of a write to a
   channel which has given us an error.  As a result, we may get a SIGPIPE.
   There has to be a good way to solve this.
o) In-path forwarding using BPF and a tiny network stack.
o) Run-length-encoding.
o) Many compression algorithms.
o) Allow chaining codecs.
