o) Change socket API to just take a string for the connection name and have
   networking code pass in stuff in the form of "[host]:service".
o) Should Socket be in 'net' or in 'io'?  I guess 'io' if we add Unix domain
   sockets at some point!
o) A CLI program for management.  Remember to USE_POLL=select since Mac OS X can
   only use select(2) for stdin and stdout.
o) Add lots of comments.
o) Make the XCodec encoder and decoder asynchronous.
o) Connection table. Database.
o) Add an IO queueing system that will make it possible to use lio_listio on
   systems that support it.
o) Allow chaining codecs.
o) Run-length-encoding.
o) Do some information exchange out-of-band when setting up connections between
   WANProxy instances so we know what Channel to send requests for declarations
   on.
o) Send definitions out-of-band, too, so that QoS and backpressure on one connection
   can't delay other connections.
o) Make it possible to detect when we are sending to a socket that is also
   within WANProxy and avoid a system call -- just copy directly to the
   appropriate buffer.  It should be pretty easy to do this with the IO queueing
   system if we getpeername/getsockname to identify this occurring.
o) The ProxyPipe code uses an asynchronous callback to notify the ProxyClient
   of an error, but this could result delayed cancellation of a write to a
   channel which has given us an error.  As a result, we may get a SIGPIPE.
   There has to be a good way to solve this.
o) HTTP termination and reinitiation good enough to support an HTTP proxy mode.
o) Fix bugs.
o) Secondary storage using tcache.
o) In-path forwarding using BPF and a tiny network stack.
o) Experiment with new codecs.  Current ideas involve using collision-prone
   hashes and variable-length tree encodings.  Others will present themselves,
   no doubt.
o) Better API for handling network addresses.
o) Many compression algorithms.
o) Chain codecs, etc.
