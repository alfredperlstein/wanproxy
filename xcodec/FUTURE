Possibly-bad future ideas:

(o) Add an out-of-window prefix e.g. ESCAPE 00 [declaration or reference] that
    is processed ahead of over stuff in the stream, to make it possible to
    handle querying the remote side for data.
(o) Incorporate run-length encoding.
(o) Make declarations actually insert data, not just add to the backref table?
(o) Make a uuid or similar part of the hash name so that collisions caused by
    restart don't confuse remote side.
(o) Add a 'generation' field to the hash as sent on wire and handle collisions
    that way?  Then first form of hash is fastest, followed by second, etc., as
    they are search -- can also put their data in a map.
(o) Possibly use two hash functions -- even just mixing crc in with the Adler
    stuff might help increase our hash entropy?  Been a while since I really
    read up on the subject and would do well to do so again.  Currently the
    entropy is not great.
(o) Incorporate occasional (figure out frequency) CRCs or such of the next N
    bytes of decoded data to make it possible to detect any hash mismatches,
    using a different hash function to any that go into the hash.
(o) If the encoded version of a stream is larger than the source would be
    escaped, it'd be nice to just transmit it escaped and to have some way to
    tell the remote side how to pick out chunks to be taken as known to both
    parties in the future.  One approach would be to send a list of offsets
    at which hashes were declared.
